"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IFirebaseFunction = void 0;
const functions = __importStar(require("firebase-functions"));
const types_1 = require("./types");
const logger_1 = require("./logger");
const crypter_1 = require("./crypter");
const parameter_1 = require("./parameter");
const database_1 = require("./database");
var IFirebaseFunction;
(function (IFirebaseFunction) {
    function create(FirebaseFunction, getPrivateKeys) {
        return functions
            .region('europe-west1')
            .https
            .onCall(async (data, context) => {
            const initialLogger = new logger_1.DummyLogger();
            if (typeof data !== 'object' || data === null)
                throw (0, types_1.HttpsError)('invalid-argument', 'Function parameter data has to be an object.', initialLogger);
            // Get database
            if (!('databaseType' in data) || typeof data.databaseType !== 'string')
                throw (0, types_1.HttpsError)('invalid-argument', 'Couldn\'t get database type from function parameter data.', initialLogger);
            const databaseType = types_1.DatabaseType.fromString(data.databaseType, initialLogger.nextIndent);
            // Get logger verbose type
            if (!('verbose' in data) || typeof data.verbose !== 'string')
                throw (0, types_1.HttpsError)('invalid-argument', 'Couldn\'t get verbose type from function parameter data.', initialLogger);
            const loggerVerboseType = logger_1.VerboseType.fromString(data.verbose, databaseType, initialLogger.nextIndent);
            const logger = logger_1.Logger.start(loggerVerboseType, 'FirebaseFunction.create', { auth: context.auth }, 'notice');
            // Check call secret
            if (!('callSecret' in data) || typeof data.callSecret !== 'object')
                throw (0, types_1.HttpsError)('invalid-argument', 'Couldn\'t get call secret from function parameter data.', logger);
            const callSecret = types_1.CallSecret.fromObject(data.callSecret, logger.nextIndent);
            types_1.CallSecret.checkCallSecret(callSecret, getPrivateKeys(databaseType).callSecretKey, logger.nextIndent);
            // Get result of function call
            const crypter = new crypter_1.Crypter(getPrivateKeys(databaseType).cryptionKeys);
            const parameterContainer = new parameter_1.ParameterContainer({ ...data, databaseType: databaseType }, crypter, logger.nextIndent);
            const databaseReference = database_1.DatabaseReference.base(getPrivateKeys(databaseType));
            const firebaseFunction = new FirebaseFunction(parameterContainer, context.auth ?? null, databaseReference, logger.nextIndent);
            const response = await execute(firebaseFunction);
            // Encrypt result
            return {
                result: crypter.encodeEncrypt(response.result),
                context: response.context
            };
        });
    }
    IFirebaseFunction.create = create;
    async function execute(firebaseFunction) {
        try {
            return {
                result: await firebaseFunction.execute()
                    .then(value => types_1.Result.success(value))
                    .catch(error => types_1.Result.failure(types_1.FirebaseError.toFirebaseError(error))),
                context: firebaseFunction.responseContext ?? null
            };
        }
        catch (error) {
            return {
                result: types_1.Result.failure(types_1.FirebaseError.toFirebaseError(error)),
                context: firebaseFunction.responseContext ?? null
            };
        }
    }
    IFirebaseFunction.execute = execute;
})(IFirebaseFunction = exports.IFirebaseFunction || (exports.IFirebaseFunction = {}));
