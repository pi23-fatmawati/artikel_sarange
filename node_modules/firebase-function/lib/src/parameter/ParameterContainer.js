"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterContainer = void 0;
const HttpsError_1 = require("../types/HttpsError");
class ParameterContainer {
    logger;
    data;
    databaseType;
    constructor(data, crypter, logger) {
        this.logger = logger;
        this.logger.log('ParameterContainer.constructor', { data: data });
        if (crypter === null) {
            this.data = data;
        }
        else {
            if (!('parameters' in data) || typeof data.parameters !== 'string')
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Missing parameters in firebase function parameters.', this.logger);
            this.data = crypter.decryptDecode(data.parameters);
        }
        this.databaseType = data.databaseType;
    }
    parameter(key, builder) {
        this.logger.log('ParameterContainer.parameter', { key: key, expectedTypes: builder.expectedTypes });
        // Throw error if the data is invalid
        if (typeof this.data !== 'object' || this.data === null)
            throw (0, HttpsError_1.HttpsError)('invalid-argument', `Couldn't get ${key.toString()} from invalid parameters.`, this.logger);
        // Throw error if key couldn't be found
        if (!(key in this.data) && !builder.expectedTypes.includes('undefined'))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', `No ${key.toString()} in parameters.`, this.logger);
        const parameter = this.data[key];
        // Throw error if type isn't expected
        if (!builder.expectedTypes.includes(typeof parameter))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', `Parameter ${key.toString()} has an invalid type, expected: ${builder.expectedTypes}, actual: ${typeof parameter}`, this.logger);
        return builder.build(parameter, this.logger.nextIndent);
    }
}
exports.ParameterContainer = ParameterContainer;
