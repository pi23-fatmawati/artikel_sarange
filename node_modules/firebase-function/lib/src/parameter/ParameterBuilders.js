"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayParameterBuilder = exports.NullableParameterBuilder = exports.OptionalParameterBuilder = exports.ParameterBuilder = exports.GuardParameterBuilder = exports.ValueParameterBuilder = void 0;
const HttpsError_1 = require("../types/HttpsError");
class ValueParameterBuilder {
    typeName;
    constructor(typeName) {
        this.typeName = typeName;
    }
    get expectedTypes() {
        return [this.typeName];
    }
    build(value, logger) {
        logger.log('ValueParameterBuilder.build', { typeName: this.typeName, value: value });
        return value;
    }
}
exports.ValueParameterBuilder = ValueParameterBuilder;
class GuardParameterBuilder {
    typeName;
    typeGuard;
    constructor(typeName, typeGuard) {
        this.typeName = typeName;
        this.typeGuard = typeGuard;
    }
    get expectedTypes() {
        return [this.typeName];
    }
    build(value, logger) {
        logger.log('GuardParameterBuilder.build', { typeName: this.typeName, value: value });
        if (!this.typeGuard(value, logger.nextIndent))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Invalid parameter, type guard failed.', logger);
        return value;
    }
}
exports.GuardParameterBuilder = GuardParameterBuilder;
class ParameterBuilder {
    typeName;
    _build;
    constructor(typeName, _build) {
        this.typeName = typeName;
        this._build = _build;
    }
    get expectedTypes() {
        return [this.typeName];
    }
    build(value, logger) {
        logger.log('ParameterBuilder.build', { typeName: this.typeName, value: value });
        return this._build(value, logger.nextIndent);
    }
}
exports.ParameterBuilder = ParameterBuilder;
class OptionalParameterBuilder {
    builder;
    constructor(builder) {
        this.builder = builder;
    }
    get expectedTypes() {
        if (this.builder.expectedTypes.includes('undefined'))
            return this.builder.expectedTypes;
        return ['undefined', ...this.builder.expectedTypes];
    }
    build(value, logger) {
        logger.log('OptionalParameterBuilder.build', { expectedTypes: this.builder.expectedTypes, value: value });
        if (typeof value === 'undefined')
            return undefined;
        return this.builder.build(value, logger.nextIndent);
    }
}
exports.OptionalParameterBuilder = OptionalParameterBuilder;
class NullableParameterBuilder {
    builder;
    constructor(builder) {
        this.builder = builder;
    }
    get expectedTypes() {
        if (this.builder.expectedTypes.includes('object'))
            return this.builder.expectedTypes;
        return ['object', ...this.builder.expectedTypes];
    }
    build(value, logger) {
        logger.log('NullableParameterBuilder.build', { expectedTypes: this.builder.expectedTypes, value: value });
        if (value === null)
            return null;
        if (typeof value === 'object' && !this.builder.expectedTypes.includes('object'))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Value is unexpected an object.', logger);
        return this.builder.build(value, logger.nextIndent);
    }
}
exports.NullableParameterBuilder = NullableParameterBuilder;
class ArrayParameterBuilder {
    builder;
    length;
    constructor(builder, length) {
        this.builder = builder;
        this.length = length;
    }
    get expectedTypes() {
        return ['object'];
    }
    build(value, logger) {
        logger.log('ArrayParameterBuilder.build', { expectedTypes: this.builder.expectedTypes, value: value });
        if (value === null || !Array.isArray(value))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Value is not an array.', logger);
        if (this.length !== undefined && value.length !== this.length)
            throw (0, HttpsError_1.HttpsError)('invalid-argument', `Value array has not the expectd length ${length}.`, logger);
        return value.map(element => {
            if (!this.builder.expectedTypes.includes(typeof element))
                throw (0, HttpsError_1.HttpsError)('invalid-argument', `Array element has an invalid type, expected: ${this.builder.expectedTypes}`, logger);
            return this.builder.build(element, logger.nextIndent);
        });
    }
}
exports.ArrayParameterBuilder = ArrayParameterBuilder;
