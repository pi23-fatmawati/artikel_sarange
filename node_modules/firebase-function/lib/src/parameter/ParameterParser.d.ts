import { type DatabaseType } from '../types/DatabaseType';
import { type ILogger } from '../logger';
import { type IParameterBuilders } from './IParameterBuilder';
import { type IParameterParser } from './IParameterParser';
import { type IParameterContainer } from './IParameterContainer';
export declare class ParameterParser<Parameters extends Record<string, unknown>> implements IParameterParser<Parameters> {
    private readonly paramterBuilders;
    private readonly logger;
    private initialParameters?;
    constructor(paramterBuilders: IParameterBuilders<Parameters>, logger: ILogger);
    get parameters(): Parameters & {
        databaseType: DatabaseType;
    };
    parse(container: IParameterContainer): void;
}
