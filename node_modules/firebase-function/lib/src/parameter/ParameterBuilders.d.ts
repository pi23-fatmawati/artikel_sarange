import { type ILogger } from '../logger';
import { type IParameterBuilder } from './IParameterBuilder';
import { type TypeFrom, type TypeOfName } from './TypeOf';
export declare class ValueParameterBuilder<TypeName extends TypeOfName> implements IParameterBuilder<TypeName, TypeFrom<TypeName>> {
    private readonly typeName;
    constructor(typeName: TypeName);
    get expectedTypes(): TypeName[];
    build(value: TypeFrom<TypeName>, logger: ILogger): TypeFrom<TypeName>;
}
export declare class GuardParameterBuilder<TypeName extends TypeOfName, T extends TypeFrom<TypeName>> implements IParameterBuilder<TypeName, T> {
    private readonly typeName;
    private readonly typeGuard;
    constructor(typeName: TypeName, typeGuard: (value: TypeFrom<TypeName>, logger: ILogger) => value is T);
    get expectedTypes(): TypeName[];
    build(value: TypeFrom<TypeName>, logger: ILogger): T;
}
export declare class ParameterBuilder<TypeName extends TypeOfName, T> implements IParameterBuilder<TypeName, T> {
    private readonly typeName;
    private readonly _build;
    constructor(typeName: TypeName, _build: (value: TypeFrom<TypeName>, logger: ILogger) => T);
    get expectedTypes(): TypeName[];
    build(value: TypeFrom<TypeName>, logger: ILogger): T;
}
export declare class OptionalParameterBuilder<TypeName extends TypeOfName, T> implements IParameterBuilder<TypeName | 'undefined', T | undefined> {
    private readonly builder;
    constructor(builder: IParameterBuilder<TypeName, T>);
    get expectedTypes(): Array<TypeName | 'undefined'>;
    build(value: TypeFrom<TypeName | 'undefined'>, logger: ILogger): T | undefined;
}
export declare class NullableParameterBuilder<TypeName extends TypeOfName, T> implements IParameterBuilder<TypeName | 'object', T | null> {
    private readonly builder;
    constructor(builder: IParameterBuilder<TypeName, T>);
    get expectedTypes(): Array<TypeName | 'object'>;
    build(value: TypeFrom<TypeName | 'object'>, logger: ILogger): T | null;
}
export declare class ArrayParameterBuilder<TypeName extends TypeOfName, T> implements IParameterBuilder<'object', T[]> {
    private readonly builder;
    private readonly length?;
    constructor(builder: IParameterBuilder<TypeName, T>, length?: number | undefined);
    get expectedTypes(): Array<'object'>;
    build(value: TypeFrom<'object'>, logger: ILogger): T[];
}
