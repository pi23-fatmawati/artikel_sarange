import { type ICrypter } from '../crypter';
import { type DatabaseType } from '../types/DatabaseType';
import { type ILogger } from '../logger';
import { type IParameterBuilder } from './IParameterBuilder';
import { type IParameterContainer } from './IParameterContainer';
import { type TypeOfName } from './TypeOf';
export declare class ParameterContainer implements IParameterContainer {
    private readonly logger;
    private readonly data;
    readonly databaseType: DatabaseType;
    constructor(data: Record<PropertyKey, unknown> & {
        databaseType: DatabaseType;
    }, crypter: ICrypter | null, logger: ILogger);
    parameter<TypeName extends TypeOfName, T>(key: PropertyKey, builder: IParameterBuilder<TypeName, T>): T;
}
