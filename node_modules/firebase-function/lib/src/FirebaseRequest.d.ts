import * as functions from 'firebase-functions';
import { type ILogger } from './logger';
import { type FunctionType } from './FunctionType';
import { type ValidReturnType } from './ValidReturnType';
import { DatabaseType } from './DatabaseType';
export type FirebaseRequestConstructor<FFunctionType extends FunctionType<unknown, ValidReturnType, Record<string, string>>> = new (params: Record<PropertyKey, unknown> & {
    databaseType: DatabaseType;
}, logger: ILogger) => FirebaseRequest<FFunctionType>;
export interface FirebaseRequest<FFunctionType extends FunctionType<unknown, ValidReturnType, unknown>> {
    parameters: FunctionType.Parameters<FFunctionType>;
    executeFunction(): Promise<FunctionType.ReturnType<FFunctionType>>;
}
export declare namespace FirebaseRequest {
    function create<FFunctionType extends FunctionType<unknown, ValidReturnType, Record<string, string>>>(FirebaseRequest: FirebaseRequestConstructor<FFunctionType>): functions.HttpsFunction;
}
