import * as functions from 'firebase-functions';
import { type AuthData, type FunctionsErrorCode } from 'firebase-functions/lib/common/providers/https';
import { DatabaseType } from './DatabaseType';
import { type FunctionType } from './FunctionType';
import { type ILogger } from './logger';
import { type PrivateKeys } from './PrivateKeys';
import { type Result as ResultSuccessFailure } from './Result';
import { type ValidReturnType } from './ValidReturnType';
export type FirebaseFunctionConstructor<FFunctionType extends FunctionType<unknown, ValidReturnType, unknown>, ResponseContext = never> = new (data: Record<PropertyKey, unknown> & {
    databaseType: DatabaseType;
}, auth: AuthData | undefined, logger: ILogger) => FirebaseFunction<FFunctionType, ResponseContext>;
export interface FirebaseFunction<FFunctionType extends FunctionType<unknown, ValidReturnType, unknown>, ResponseContext = never> {
    parameters: FunctionType.Parameters<FFunctionType>;
    responseContext?: ResponseContext;
    executeFunction(): Promise<FunctionType.ReturnType<FFunctionType>>;
}
export declare namespace FirebaseFunction {
    interface Error {
        name: 'FirebaseFunctionError';
        code: FunctionsErrorCode;
        message: string;
        details?: unknown;
        stack?: string;
    }
    type Result<T> = ResultSuccessFailure<T, FirebaseFunction.Error>;
    function create<FFunctionType extends FunctionType<unknown, ValidReturnType, unknown>>(FirebaseFunction: FirebaseFunctionConstructor<FFunctionType>, getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys): functions.HttpsFunction & functions.Runnable<unknown>;
}
export declare function executeFunction<FFunctionType extends FunctionType<unknown, ValidReturnType, unknown>, ResponseContext>(firebaseFunction: FirebaseFunction<FFunctionType, ResponseContext>): Promise<{
    result: FirebaseFunction.Result<FunctionType.ReturnType<FFunctionType> extends undefined ? null : FunctionType.ReturnType<FFunctionType>>;
    context: ResponseContext | null;
}>;
/**
 * Get the result of a promise:
 *     - Result.success if promise resolves.
 *     - Result.failure if promise rejects.
 * @template T Type of the promise.
 * @param { Promise<T> } promise Promise to get result from.
 * @return { Promise<Result<T, Error>> } Return promise.
 */
export declare function mapReturnTypeToResult<T>(promise: Promise<T>): Promise<FirebaseFunction.Result<T extends undefined ? null : T>>;
