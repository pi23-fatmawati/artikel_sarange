"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseError = void 0;
var FirebaseError;
(function (FirebaseError) {
    function isFirebaseErrorCode(code) {
        return [
            'ok', 'cancelled', 'unknown', 'invalid-argument', 'deadline-exceeded', 'not-found', 'already-exists',
            'permission-denied', 'resource-exhausted', 'failed-precondition', 'aborted', 'out-of-range', 'unimplemented',
            'internal', 'unavailable', 'data-loss', 'unauthenticated'
        ].includes(code);
    }
    FirebaseError.isFirebaseErrorCode = isFirebaseErrorCode;
    function toFirebaseError(error) {
        const errorIsObject = error !== null && typeof error === 'object';
        const hasMessage = errorIsObject && 'message' in error && error.message !== undefined && error.message !== null && error.message !== '';
        const hasStack = errorIsObject && 'stack' in error && error.stack !== undefined && error.stack !== null && error.stack !== '';
        return {
            name: 'FirebaseError',
            code: errorIsObject && 'code' in error && typeof error.code === 'string' && isFirebaseErrorCode(error.code) ? error.code : 'unknown',
            message: hasMessage ? `${error.message}` : 'Unknown error occured, see details for more infos.',
            details: hasMessage && 'details' in error ? error.details : error,
            stack: hasStack ? `${error.stack}` : undefined
        };
    }
    FirebaseError.toFirebaseError = toFirebaseError;
})(FirebaseError = exports.FirebaseError || (exports.FirebaseError = {}));
