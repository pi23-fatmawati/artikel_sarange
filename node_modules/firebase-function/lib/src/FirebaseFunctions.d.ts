import type * as functions from 'firebase-functions';
import { DatabaseType, type PrivateKeys } from './types';
import { type FirebaseDescriptor } from './FirebaseDescriptor';
import { type IDatabaseScheme } from './database';
export type FirebaseFunctions<DatabaseScheme extends IDatabaseScheme = any> = FirebaseDescriptor<DatabaseScheme> | {
    [key: string]: FirebaseFunctions<DatabaseScheme>;
};
export type RunnableFirebaseFunctions = (functions.HttpsFunction & functions.Runnable<unknown>) | functions.CloudFunction<unknown> | functions.HttpsFunction | {
    [key: string]: RunnableFirebaseFunctions;
};
export declare function createFirebaseFunctions<DatabaseScheme extends IDatabaseScheme>(getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys, firebaseFunctions: Record<string, FirebaseFunctions<DatabaseScheme>>, debugFirebaseFunctions?: Record<string, FirebaseFunctions<DatabaseScheme>>): RunnableFirebaseFunctions;
