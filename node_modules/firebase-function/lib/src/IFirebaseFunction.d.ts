import * as functions from 'firebase-functions';
import { type AuthData } from 'firebase-functions/lib/common/providers/https';
import { DatabaseType, type IFunctionType, type PrivateKeys, type FirebaseResult } from './types';
import { type ILogger } from './logger';
import { type IParameterContainer } from './parameter';
import { type IDatabaseReference, type IDatabaseScheme } from './database';
export interface IFirebaseFunction<FunctionType extends IFunctionType.Erased, ResponseContext = never> {
    parameters: IFunctionType.Parameters<FunctionType>;
    responseContext?: ResponseContext;
    execute(): Promise<IFunctionType.ReturnType<FunctionType>>;
}
export declare namespace IFirebaseFunction {
    type Constructor<FunctionType extends IFunctionType.Erased, ResponseContext, DatabaseScheme extends IDatabaseScheme> = new (parameterContainer: IParameterContainer, auth: AuthData | null, databaseReference: IDatabaseReference<DatabaseScheme>, logger: ILogger) => IFirebaseFunction<FunctionType, ResponseContext>;
    function create<FunctionType extends IFunctionType.Erased, ResponseContext, DatabaseScheme extends IDatabaseScheme>(FirebaseFunction: IFirebaseFunction.Constructor<FunctionType, ResponseContext, DatabaseScheme>, getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys): functions.HttpsFunction & functions.Runnable<unknown>;
    function execute<FunctionType extends IFunctionType.Erased, ResponseContext>(firebaseFunction: IFirebaseFunction<FunctionType, ResponseContext>): Promise<{
        result: FirebaseResult<IFunctionType.ReturnType<FunctionType>>;
        context: ResponseContext | null;
    }>;
}
