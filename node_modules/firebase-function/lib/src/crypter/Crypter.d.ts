import { type FixedLength } from './FixedLength';
import { type ICrypter } from './ICrypter';
export declare class Crypter implements ICrypter {
    private readonly cryptionKeys;
    constructor(cryptionKeys: Crypter.Keys);
    encryptAes(bytes: Uint8Array): Uint8Array;
    decryptAes(bytes: Uint8Array): Uint8Array;
    encryptVernamCipher(bytes: Uint8Array): Uint8Array;
    decryptVernamCipher(bytes: Uint8Array): Uint8Array;
    encryptVernamAndAes(bytes: Uint8Array): Uint8Array;
    decryptAesAndVernam(bytes: Uint8Array): Uint8Array;
    encodeEncrypt(data: unknown): string;
    decryptDecode(data: ''): undefined;
    decryptDecode<T = unknown>(data: string): T;
}
export declare namespace Crypter {
    interface Keys {
        encryptionKey: FixedLength<Uint8Array, 32>;
        initialisationVector: FixedLength<Uint8Array, 16>;
        vernamKey: FixedLength<Uint8Array, 32>;
    }
}
