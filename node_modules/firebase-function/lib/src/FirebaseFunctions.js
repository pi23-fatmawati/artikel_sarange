"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFirebaseFunctions = void 0;
const types_1 = require("./types");
const IFirebaseFunction_1 = require("./IFirebaseFunction");
const IFirebaseRequest_1 = require("./IFirebaseRequest");
const IFirebaseSchedule_1 = require("./IFirebaseSchedule");
function createFirebaseFunctions(getPrivateKeys, firebaseFunctions, debugFirebaseFunctions = {}) {
    return {
        debug: createFirebaseFunctionsType(debugFirebaseFunctions, getPrivateKeys, new types_1.DatabaseType('debug')),
        ...createFirebaseFunctionsType(firebaseFunctions, getPrivateKeys, new types_1.DatabaseType('release'))
    };
}
exports.createFirebaseFunctions = createFirebaseFunctions;
function createFirebaseFunctionsType(firebaseFunctions, getPrivateKeys, databaseType) {
    if (Array.isArray(firebaseFunctions)) {
        if (firebaseFunctions.length === 1)
            return IFirebaseFunction_1.IFirebaseFunction.create(firebaseFunctions[0], getPrivateKeys);
        if (firebaseFunctions.length === 2)
            return IFirebaseRequest_1.IFirebaseRequest.create(firebaseFunctions[0], getPrivateKeys);
        if (firebaseFunctions.length === 3)
            return IFirebaseSchedule_1.IFirebaseSchedule.create(firebaseFunctions[0], getPrivateKeys, firebaseFunctions[1], databaseType);
    }
    const runnableFirebaseFunctions = {};
    for (const entry of Object.entries(firebaseFunctions))
        runnableFirebaseFunctions[entry[0]] = createFirebaseFunctionsType(entry[1], getPrivateKeys, databaseType);
    return runnableFirebaseFunctions;
}
