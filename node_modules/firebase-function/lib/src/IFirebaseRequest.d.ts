import * as functions from 'firebase-functions';
import { type ILogger } from './logger';
import { type IFunctionType, DatabaseType, type PrivateKeys } from './types';
import { type IParameterContainer } from './parameter';
import { type IDatabaseScheme, type IDatabaseReference } from './database';
export interface IFirebaseRequest<FunctionType extends IFunctionType.Erased> {
    parameters: IFunctionType.Parameters<FunctionType>;
    execute(): Promise<IFunctionType.ReturnType<FunctionType>>;
}
export declare namespace IFirebaseRequest {
    type Constructor<FunctionType extends IFunctionType.Erased, DatabaseScheme extends IDatabaseScheme> = new (parameterContainer: IParameterContainer, databaseReference: IDatabaseReference<DatabaseScheme>, logger: ILogger) => IFirebaseRequest<FunctionType>;
    function create<FunctionType extends IFunctionType.Erased, DatabaseScheme extends IDatabaseScheme>(FirebaseRequest: IFirebaseRequest.Constructor<FunctionType, DatabaseScheme>, getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys): functions.HttpsFunction;
}
