"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IFirebaseRequest = void 0;
const functions = __importStar(require("firebase-functions"));
const logger_1 = require("./logger");
const types_1 = require("./types");
const parameter_1 = require("./parameter");
const database_1 = require("./database");
var IFirebaseRequest;
(function (IFirebaseRequest) {
    function create(FirebaseRequest, getPrivateKeys) {
        return functions
            .region('europe-west1')
            .https
            .onRequest(async (request, response) => {
            const initialLogger = new logger_1.DummyLogger();
            // Get database
            let databaseType = new types_1.DatabaseType('release');
            if ('databaseType' in request.query) {
                if (typeof request.query.databaseType !== 'string')
                    throw (0, types_1.HttpsError)('invalid-argument', 'Couldn\'t get database type from function parameter data.', initialLogger);
                databaseType = types_1.DatabaseType.fromString(request.query.databaseType, initialLogger.nextIndent);
            }
            // Get logger verbose type
            let loggerVerboseType = new logger_1.VerboseType('none');
            if ('verbose' in request.query) {
                if (typeof request.query.verbose !== 'string')
                    throw (0, types_1.HttpsError)('invalid-argument', 'Couldn\'t get verbose type from function parameter data.', initialLogger);
                loggerVerboseType = logger_1.VerboseType.fromString(request.query.verbose, databaseType, initialLogger.nextIndent);
            }
            const logger = logger_1.Logger.start(loggerVerboseType, 'FirebaseRequest.create', undefined, 'notice');
            // Get response of function call
            const parameterContainer = new parameter_1.ParameterContainer({ ...request.query, databaseType: databaseType }, null, logger.nextIndent);
            const databaseReference = database_1.DatabaseReference.base(getPrivateKeys(databaseType));
            const firebaseRequest = new FirebaseRequest(parameterContainer, databaseReference, logger.nextIndent);
            response.send(await firebaseRequest.execute());
        });
    }
    IFirebaseRequest.create = create;
})(IFirebaseRequest = exports.IFirebaseRequest || (exports.IFirebaseRequest = {}));
