"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDatabaseSnapshot = void 0;
class MockDatabaseSnapshot {
    key;
    data;
    constructor(key, data) {
        this.key = key;
        this.data = data;
    }
    get hasChildren() {
        return typeof this.data === 'object' && this.data !== null;
    }
    get numberChildren() {
        if (typeof this.data !== 'object' || this.data === null)
            return 0;
        return Object.values(this.data).length;
    }
    get exists() {
        return this.data !== null;
    }
    value(crypted = 'plain') {
        if (crypted === 'decrypt') {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.data.value;
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.data;
    }
    hasChild(path) {
        return typeof this.data === 'object' && this.data !== null && path in this.data;
    }
    child(key) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new MockDatabaseSnapshot(key, this.data === null ? null : this.data[key]);
    }
    forEach(action) {
        if (typeof this.data !== 'object' || this.data === null)
            return false;
        for (const entry of Object.entries(this.data)) {
            const shouldBreak = action(new MockDatabaseSnapshot(entry[0], entry[1]));
            if (shouldBreak === true)
                return true;
        }
        return false;
    }
    map(transform) {
        const result = [];
        this.forEach(snapshot => {
            result.push(transform(snapshot));
        });
        return result;
    }
    flatMap(transform) {
        const result = [];
        this.forEach(snapshot => {
            for (const value of transform(snapshot))
                result.push(value);
        });
        return result;
    }
    compactMap(transform) {
        const result = [];
        this.forEach(snapshot => {
            const value = transform(snapshot);
            if (value !== undefined && value !== null)
                result.push(value);
        });
        return result;
    }
    reduce(initialValue, transform) {
        this.forEach(snapshot => {
            initialValue = transform(initialValue, snapshot);
        });
        return initialValue;
    }
    reduceInto(initialValue, transform) {
        this.forEach(snapshot => {
            transform(initialValue, snapshot);
        });
        return initialValue;
    }
}
exports.MockDatabaseSnapshot = MockDatabaseSnapshot;
