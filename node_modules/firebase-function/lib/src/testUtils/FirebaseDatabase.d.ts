import { type Database } from 'firebase/database';
import { Crypter } from '../crypter';
import { type IDatabaseScheme, type CryptedScheme } from '../database';
export declare class FirebaseDatabase<DatabaseScheme extends IDatabaseScheme> {
    private readonly database;
    private readonly cryptionKeys;
    private readonly path?;
    constructor(database: Database, cryptionKeys: Crypter.Keys, path?: string | undefined);
    child<Key extends true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : (keyof DatabaseScheme & string)>(key: Key): FirebaseDatabase<DatabaseScheme extends Record<string, IDatabaseScheme> ? DatabaseScheme[Key] : never>;
    set(value: CryptedScheme.GetType<DatabaseScheme>, crypted: 'encrypt'): Promise<void>;
    set(value: true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : DatabaseScheme): Promise<void>;
    private value;
    get(crypted: 'decrypt'): Promise<true extends CryptedScheme.IsCrypted<DatabaseScheme> ? CryptedScheme.GetType<DatabaseScheme> : never>;
    get(): Promise<true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : DatabaseScheme>;
    exists(): Promise<boolean>;
    remove(): Promise<void>;
}
