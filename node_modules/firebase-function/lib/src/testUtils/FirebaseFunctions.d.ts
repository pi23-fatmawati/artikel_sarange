import { type Functions } from 'firebase/functions';
import { Crypter } from '../crypter';
import { type FirebaseFunctions as FirebaseFunctionsType } from '../FirebaseFunctions';
import { type ExpectResult } from './Expect';
import { type IFunctionType } from '../types';
import { type FirebaseDescriptor } from '../FirebaseDescriptor';
import { type IDatabaseScheme } from '../database';
export declare class FirebaseFunctions<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> {
    private readonly functions;
    private readonly requestUrlComponent;
    private readonly cryptionKeys;
    private readonly callSecretKey;
    private readonly functionName?;
    constructor(functions: Functions, requestUrlComponent: string, cryptionKeys: Crypter.Keys, callSecretKey: string, functionName?: string | undefined);
    function<Key extends FirebaseFunctions.KeyIfRecord<FFunctions, DatabaseScheme>>(key: Key): FirebaseFunctions<FirebaseFunctions.FFunctionIfRecord<FFunctions, Key, DatabaseScheme>, DatabaseScheme>;
    call(parameters: FirebaseFunctions.ParametersIfFunction<FFunctions, DatabaseScheme>): Promise<ExpectResult<FirebaseFunctions.ReturnTypeIfFunction<FFunctions, DatabaseScheme>>>;
    request(parameters: FirebaseFunctions.ParametersIfRequest<FFunctions, DatabaseScheme>): Promise<ExpectResult<FirebaseFunctions.ReturnTypeIfRequest<FFunctions, DatabaseScheme>>>;
}
declare namespace FirebaseFunctions {
    type KeyIfRecord<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> = (FFunctions extends Record<string, FirebaseFunctionsType<DatabaseScheme>> ? (keyof FFunctions & string) : never);
    type FFunctionIfRecord<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, Key extends keyof FFunctions, DatabaseScheme extends IDatabaseScheme> = FFunctions extends Record<string, FirebaseFunctionsType<DatabaseScheme>> ? FFunctions[Key] : never;
    type ParametersIfFunction<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> = FFunctions extends FirebaseDescriptor.Function<infer FunctionType, unknown, DatabaseScheme> ? IFunctionType.FlattenParameters<FunctionType> : never;
    type ReturnTypeIfFunction<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> = FFunctions extends FirebaseDescriptor.Function<infer FunctionType, unknown, DatabaseScheme> ? IFunctionType.ReturnType<FunctionType> : never;
    type ParametersIfRequest<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> = FFunctions extends FirebaseDescriptor.Request<infer FunctionType, DatabaseScheme> ? IFunctionType.FlattenParameters<FunctionType> : never;
    type ReturnTypeIfRequest<FFunctions extends FirebaseFunctionsType<DatabaseScheme>, DatabaseScheme extends IDatabaseScheme> = FFunctions extends FirebaseDescriptor.Request<infer FunctionType, DatabaseScheme> ? IFunctionType.ReturnType<FunctionType> : never;
}
export {};
