import { type IDatabaseReference } from '../database/IDatabaseReference';
import { type ValidDatabaseSchemeType, type CryptedScheme, type IDatabaseScheme } from '../database/IDatabaseScheme';
import { type IDatabaseSnapshot } from '../database/IDatabaseSnapshot';
export declare class MockDatabaseReference<DatabaseScheme extends IDatabaseScheme> implements IDatabaseReference<DatabaseScheme> {
    private data;
    readonly key: string | null;
    constructor(data: DatabaseScheme | null, key?: string | null);
    snapshot(): Promise<IDatabaseSnapshot<DatabaseScheme>>;
    child<Key extends true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : keyof DatabaseScheme & string>(key: Key): IDatabaseReference<DatabaseScheme extends Record<string, IDatabaseScheme> ? DatabaseScheme[Key] : never>;
    set(value: CryptedScheme.GetType<DatabaseScheme>, crypted: 'encrypt'): Promise<void>;
    set(value: true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : DatabaseScheme): Promise<void>;
    remove(): Promise<void>;
}
export declare namespace MockDatabaseReference {
    function createDatabaseScheme<DatabaseScheme extends IDatabaseScheme>(create: (encrypt: <T extends ValidDatabaseSchemeType>(value: T) => CryptedScheme<T>) => DatabaseScheme): DatabaseScheme;
}
