/// <reference types="chai" />
import { type FirebaseResult, type FirebaseError } from '../types';
export declare function expect<T>(value: T): Expect<T>;
export declare function expectResult<T>(result: FirebaseResult<T>): ExpectResult<T>;
export declare function expectHttpsError(execute: () => void, code: FirebaseError.Code): void;
export declare class Expect<T> {
    private readonly _value;
    constructor(_value: T);
    value<Key extends keyof T>(key: Key): Expect<T[Key]>;
    get to(): ExpectTo<T>;
}
export declare class ExpectTo<T> {
    private readonly _value;
    constructor(_value: T);
    get be(): ExpectToBe<T>;
}
export declare class ExpectToBe<T> {
    readonly value: T;
    constructor(value: T);
    get deep(): ExpectToBeDeep<T>;
    equal(value: T, message?: string): Chai.Assertion;
    unsorted(value: T extends Array<infer Element> ? Element[] : never, message?: string): void;
}
export declare class ExpectToBeDeep<T> {
    readonly value: T;
    constructor(value: T);
    equal(value: T, message?: string): Chai.Assertion;
    unsorted(value: T extends Array<infer Element> ? Element[] : never, message?: string): void;
    private deepEqual;
    private removeUndefined;
}
export declare class ExpectResult<T> {
    private readonly result;
    constructor(result: FirebaseResult<T>);
    get success(): ExpectToBe<T> | ExpectToBeDeep<T>;
    get failure(): ExpectToBeDeep<{
        code: FirebaseError.Code;
        message: string;
    }>;
}
