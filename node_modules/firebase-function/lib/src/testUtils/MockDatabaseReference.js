"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDatabaseReference = void 0;
const MockDatabaseSnapshot_1 = require("./MockDatabaseSnapshot");
class MockDatabaseReference {
    data;
    key;
    constructor(data, key = null) {
        this.data = data;
        this.key = key;
    }
    async snapshot() {
        return new MockDatabaseSnapshot_1.MockDatabaseSnapshot(this.key, this.data);
    }
    child(key) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new ParentMockDatabaseRefernence(this.data !== null && typeof this.data === 'object' ? this.data : null, key);
    }
    async set(value, crypted = 'plain') {
        if (crypted === 'encrypt') {
            this.data = {
                value: value,
                crypted: true
            };
        }
        else {
            this.data = value;
        }
    }
    async remove() {
        this.data = null;
    }
}
exports.MockDatabaseReference = MockDatabaseReference;
class ParentMockDatabaseRefernence {
    parentData;
    childKey;
    constructor(parentData, childKey) {
        this.parentData = parentData;
        this.childKey = childKey;
    }
    async snapshot() {
        return new MockDatabaseSnapshot_1.MockDatabaseSnapshot(this.childKey, this.parentData !== null && this.childKey in this.parentData ? this.parentData[this.childKey] : null);
    }
    child(key) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new ParentMockDatabaseRefernence(this.parentData !== null && this.childKey in this.parentData && typeof this.parentData[this.childKey] === 'object' ? this.parentData[this.childKey] : null, key);
    }
    async set(value, crypted = 'plain') {
        if (this.parentData === null)
            return;
        if (crypted === 'encrypt') {
            this.parentData[this.childKey] = {
                value: value,
                crypted: true
            };
        }
        else {
            this.parentData[this.childKey] = value;
        }
    }
    async remove() {
        if (this.parentData !== null && this.childKey in this.parentData)
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this.parentData[this.childKey];
    }
}
(function (MockDatabaseReference) {
    function createDatabaseScheme(create) {
        return create(value => ({ value: value, crypted: true }));
    }
    MockDatabaseReference.createDatabaseScheme = createDatabaseScheme;
})(MockDatabaseReference = exports.MockDatabaseReference || (exports.MockDatabaseReference = {}));
