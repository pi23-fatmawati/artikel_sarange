export type ValidDatabaseSchemeType = boolean | string | number | null | IDatabaseScheme[] | {
    [key: string]: IDatabaseScheme;
};
export interface CryptedScheme<T extends ValidDatabaseSchemeType> {
    value: T;
    crypted: true;
}
export declare namespace CryptedScheme {
    type IsCrypted<T extends IDatabaseScheme> = T extends CryptedScheme<ValidDatabaseSchemeType> ? true : never;
    type GetType<T extends IDatabaseScheme> = T extends CryptedScheme<infer Scheme> ? Scheme : never;
}
export type IDatabaseScheme = ValidDatabaseSchemeType | CryptedScheme<ValidDatabaseSchemeType>;
