import * as admin from 'firebase-admin';
import { Crypter } from '../crypter';
import { type PrivateKeys } from '../types/PrivateKeys';
import { DatabaseSnapshot } from './DatabaseSnapshot';
import { type IDatabaseScheme, type CryptedScheme } from './IDatabaseScheme';
import { type IDatabaseReference } from './IDatabaseReference';
export declare class DatabaseReference<DatabaseScheme extends IDatabaseScheme> implements IDatabaseReference<DatabaseScheme> {
    private readonly reference;
    private readonly cryptionKeys;
    constructor(reference: admin.database.Reference, cryptionKeys: Crypter.Keys);
    snapshot(): Promise<DatabaseSnapshot<DatabaseScheme>>;
    child<Key extends true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : (keyof DatabaseScheme & string)>(key: Key): DatabaseReference<DatabaseScheme extends Record<string, IDatabaseScheme> ? DatabaseScheme[Key] : never>;
    set(value: CryptedScheme.GetType<DatabaseScheme>, crypted: 'encrypt'): Promise<void>;
    set(value: true extends CryptedScheme.IsCrypted<DatabaseScheme> ? never : DatabaseScheme): Promise<void>;
    remove(): Promise<void>;
}
export declare namespace DatabaseReference {
    function base<DatabaseScheme extends IDatabaseScheme>(privateKey: PrivateKeys): DatabaseReference<DatabaseScheme>;
}
