"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const crypter_1 = require("../src/crypter");
const src_1 = require("../src");
const logger_1 = require("../src/logger");
const parameter_1 = require("../src/parameter");
function expectHttpsError(execute, code) {
    try {
        execute();
    }
    catch (error) {
        (0, chai_1.expect)(error).to.have.ownProperty('httpErrorCode');
        (0, chai_1.expect)(error).to.have.ownProperty('code');
        (0, chai_1.expect)(error.code).to.be.equal(code);
        return;
    }
    chai_1.expect.fail('Expected to throw an error.');
}
class StringClassType {
    value;
    constructor(value) {
        this.value = value;
    }
}
(function (StringClassType) {
    function fromString(value, logger) {
        if (value !== 'v1' && value !== 'v2' && value !== 'v3')
            throw (0, src_1.HttpsError)('internal', '', logger);
        return new StringClassType(value);
    }
    StringClassType.fromString = fromString;
})(StringClassType || (StringClassType = {}));
class NumberClassType {
    value;
    constructor(value) {
        this.value = value;
    }
}
(function (NumberClassType) {
    function fromNumber(value) {
        return new NumberClassType(value);
    }
    NumberClassType.fromNumber = fromNumber;
})(NumberClassType || (NumberClassType = {}));
class ObjectClassType {
    v1;
    v2;
    constructor(v1, v2) {
        this.v1 = v1;
        this.v2 = v2;
    }
}
(function (ObjectClassType) {
    function fromObject(value, logger) {
        if (value === null)
            throw (0, src_1.HttpsError)('internal', '', logger);
        if (!('v1' in value) || typeof value.v1 !== 'string')
            throw (0, src_1.HttpsError)('internal', '', logger);
        if (!('v2' in value) || typeof value.v2 !== 'number')
            throw (0, src_1.HttpsError)('internal', '', logger);
        return new ObjectClassType(value.v1, value.v2);
    }
    ObjectClassType.fromObject = fromObject;
})(ObjectClassType || (ObjectClassType = {}));
describe('ParameterParser', () => {
    const cryptionKeys = {
        encryptionKey: new crypter_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]), 32),
        initialisationVector: new crypter_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]), 16),
        vernamKey: new crypter_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]), 32)
    };
    const crypter = new crypter_1.Crypter(cryptionKeys);
    const logger = logger_1.Logger.start(new logger_1.VerboseType('coloredVerbose'), 'parameter parser test');
    function testParameterParser(parameterToParse, builders, expectedParameters) {
        const parameterContainer = new parameter_1.ParameterContainer({
            databaseType: new src_1.DatabaseType('testing'),
            parameters: crypter.encodeEncrypt(parameterToParse)
        }, crypter, logger.nextIndent);
        const parameterParser = new parameter_1.ParameterParser(builders, logger.nextIndent);
        parameterParser.parse(parameterContainer);
        (0, chai_1.expect)(parameterParser.parameters).to.be.deep.equal(expectedParameters);
    }
    it('get parameter before parsing', () => {
        expectHttpsError(() => {
            const parameterParser = new parameter_1.ParameterParser({
                value: new parameter_1.ValueParameterBuilder('string')
            }, logger.nextIndent);
            parameterParser.parameters;
        }, 'internal');
    });
    it('empty parameter', () => {
        testParameterParser({}, {}, {
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('only primitive types and object', () => {
        testParameterParser({
            value1: 'asdf',
            value2: 12,
            value3: {
                subValue1: 'ghjk',
                subValue2: 98
            }
        }, {
            value1: new parameter_1.ValueParameterBuilder('string'),
            value2: new parameter_1.ValueParameterBuilder('number'),
            value3: new parameter_1.ValueParameterBuilder('object')
        }, {
            value1: 'asdf',
            value2: 12,
            value3: {
                subValue1: 'ghjk',
                subValue2: 98
            },
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('only builders', () => {
        testParameterParser({
            value1: 'v1',
            value2: 12.50,
            value3: {
                v1: 'a',
                v2: 3
            }
        }, {
            value1: new parameter_1.ParameterBuilder('string', StringClassType.fromString),
            value2: new parameter_1.ParameterBuilder('number', NumberClassType.fromNumber),
            value3: new parameter_1.ParameterBuilder('object', ObjectClassType.fromObject)
        }, {
            value1: new StringClassType('v1'),
            value2: new NumberClassType(12.50),
            value3: new ObjectClassType('a', 3),
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('primitive types, object and builders', () => {
        testParameterParser({
            value1: 23.9,
            value2: 'v3'
        }, {
            value1: new parameter_1.ValueParameterBuilder('number'),
            value2: new parameter_1.ParameterBuilder('string', StringClassType.fromString)
        }, {
            value1: 23.9,
            value2: new StringClassType('v3'),
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('builder throws', () => {
        try {
            testParameterParser({
                value1: 'invalid'
            }, {
                value1: new parameter_1.ParameterBuilder('string', StringClassType.fromString)
            }, {
                value1: new StringClassType('v1'),
                databaseType: new src_1.DatabaseType('testing')
            });
            (0, chai_1.expect)(true).to.be.false;
        }
        catch (error) {
            (0, chai_1.expect)(error).to.have.ownProperty('code');
            (0, chai_1.expect)(error.code).to.be.equal('internal');
        }
    });
    it('also parse database type', () => {
        testParameterParser({
            value1: 'as',
            databaseType: 'testing'
        }, {
            value1: new parameter_1.ValueParameterBuilder('string'),
            databaseType: new parameter_1.ParameterBuilder('string', src_1.DatabaseType.fromString)
        }, {
            value1: 'as',
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('guard builder', () => {
        testParameterParser({
            value: 'b'
        }, {
            value: new parameter_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')
        }, {
            value: 'b',
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('optional builder', () => {
        testParameterParser({
            value1a: 12,
            value1b: undefined,
            value2a: 'a',
            value2b: undefined,
            value3a: 'testing',
            value3b: undefined,
            value4a: undefined
        }, {
            value1a: new parameter_1.OptionalParameterBuilder(new parameter_1.ValueParameterBuilder('number')),
            value1b: new parameter_1.OptionalParameterBuilder(new parameter_1.ValueParameterBuilder('number')),
            value2a: new parameter_1.OptionalParameterBuilder(new parameter_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')),
            value2b: new parameter_1.OptionalParameterBuilder(new parameter_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')),
            value3a: new parameter_1.OptionalParameterBuilder(new parameter_1.ParameterBuilder('string', src_1.DatabaseType.fromString)),
            value3b: new parameter_1.OptionalParameterBuilder(new parameter_1.ParameterBuilder('string', src_1.DatabaseType.fromString)),
            value4a: new parameter_1.OptionalParameterBuilder(new parameter_1.ParameterBuilder('undefined', (value) => value))
        }, {
            value1a: 12,
            value1b: undefined,
            value2a: 'a',
            value2b: undefined,
            value3a: new src_1.DatabaseType('testing'),
            value3b: undefined,
            value4a: undefined,
            databaseType: new src_1.DatabaseType('testing')
        });
    });
    it('invalid type', () => {
        expectHttpsError(() => {
            testParameterParser({
                value: 'asdf'
            }, {
                value: { expectedTypes: ['number'], build: (v) => v.toString() }
            }, {
                value: 'asdf',
                databaseType: new src_1.DatabaseType('testing')
            });
        }, 'invalid-argument');
    });
    it('invalid undefined type', () => {
        expectHttpsError(() => {
            testParameterParser({
                value: undefined
            }, {
                value: { expectedTypes: ['number'], build: (v) => v.toString() }
            }, {
                value: 'asdf',
                databaseType: new src_1.DatabaseType('testing')
            });
        }, 'invalid-argument');
    });
    it('failed guard builder', () => {
        expectHttpsError(() => {
            testParameterParser({
                value: 'c'
            }, {
                value: new parameter_1.GuardParameterBuilder('string', (value) => value === 'a' || value === 'b')
            }, {
                value: 'a',
                databaseType: new src_1.DatabaseType('testing')
            });
        }, 'invalid-argument');
    });
});
